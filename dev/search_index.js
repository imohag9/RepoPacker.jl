var documenterSearchIndex = {"docs":
[{"location":"api/#Data-Models","page":"API Reference","title":"Data Models","text":"","category":"section"},{"location":"api/","page":"API Reference","title":"API Reference","text":"This section documents the key data models used throughout the RepoPacker.jl package.","category":"page"},{"location":"api/#RepoPacker.add_extension-Tuple{AbstractString}","page":"API Reference","title":"RepoPacker.add_extension","text":"add_extension(ext::AbstractString)\n\nAdd a file extension (e.g., \".r\", \".sql\") to the list of recognized text file extensions. The extension should include the leading dot.\n\nArguments\n\next: File extension to add (must start with a dot)\n\nExamples\n\nRepoPacker.add_extension(\".r\")\nRepoPacker.add_extension(\".sql\")\n\nErrors\n\nThrows ArgumentError if extension doesn't start with a dot\n\n\n\n\n\n","category":"method"},{"location":"api/#RepoPacker.calculate_file_metrics-Tuple{Vector{String}, AbstractString}","page":"API Reference","title":"RepoPacker.calculate_file_metrics","text":"calculate_file_metrics(text_files::Vector{String}, base_dir::AbstractString)\n\nCalculate metrics for a collection of text files.\n\nReturns\n\nTuple containing:\ntotal_chars: Total character count\ntotal_tokens: Total token estimate\nfilecharcounts: Dict mapping file paths to character counts\nfiletokencounts: Dict mapping file paths to token estimates\n\n\n\n\n\n","category":"method"},{"location":"api/#RepoPacker.clone_and_pack","page":"API Reference","title":"RepoPacker.clone_and_pack","text":"clone_and_pack(repo_url::AbstractString, output_file::AbstractString=\"repo.xml\"; \n               output_style::Symbol=:xml, temp_dir::AbstractString=tempname(), verbose::Bool=false)\n\nClone a GitHub repository and pack its text files into a file in the specified format.\n\nArguments\n\nrepo_url: URL of the Git repository to clone\noutput_file: Output file path (default: \"repo.xml\")\noutput_style: Format to use (:xml, :json, or :markdown)\ntemp_dir: Temporary directory for cloning (default: auto-generated)\nverbose: Whether to enable detailed logging (default: false)\n\nReturns\n\nPath to the generated output file\n\nExamples\n\nRepoPacker.clone_and_pack(\"https://github.com/username/repo.git\", \"output.xml\")\n\nErrors\n\nThrows errors related to Git operations or file writing\n\n\n\n\n\n","category":"function"},{"location":"api/#RepoPacker.collect_text_files-Tuple{AbstractString}","page":"API Reference","title":"RepoPacker.collect_text_files","text":"collect_text_files(dir_path::AbstractString; verbose::Bool=false)\n\nRecursively collect all text files in a directory, skipping .git and neglected paths.\n\nArguments\n\ndir_path: Directory path to scan\nverbose: Whether to enable detailed logging (default: false)\n\nReturns\n\nVector of text file paths\n\nExamples\n\nfiles = RepoPacker.collect_text_files(\".\")\n\nErrors\n\nThrows ArgumentError if directory doesn't exist\n\n\n\n\n\n","category":"method"},{"location":"api/#RepoPacker.estimate_token_count-Tuple{String}","page":"API Reference","title":"RepoPacker.estimate_token_count","text":"estimate_token_count(content::String)\n\nEstimate token count using the simple heuristic: length(content) รท 4. This approximates GPT-style tokenizers for English-like code/text.\n\nReturns\n\nEstimated token count as Int\n\n\n\n\n\n","category":"method"},{"location":"api/#RepoPacker.generate_json_content-Tuple{Vector{String}, AbstractString}","page":"API Reference","title":"RepoPacker.generate_json_content","text":"generate_json_content(text_files::Vector{String}, base_dir::AbstractString; verbose::Bool=false)\n\nGenerate repository content in Repomix-inspired JSON format.\n\nReturns\n\nString containing valid JSON with keys: fileSummary, directoryStructure, files, metrics\n\n\n\n\n\n","category":"method"},{"location":"api/#RepoPacker.generate_markdown_content-Tuple{Vector{String}, AbstractString}","page":"API Reference","title":"RepoPacker.generate_markdown_content","text":"generate_markdown_content(text_files::Vector{String}, base_dir::AbstractString; verbose::Bool=false)\n\nGenerate repository content in Repomix-inspired Markdown format.\n\n\n\n\n\n","category":"method"},{"location":"api/#RepoPacker.generate_xml_content-Tuple{Vector{String}, AbstractString}","page":"API Reference","title":"RepoPacker.generate_xml_content","text":"generate_xml_content(text_files::Vector{String}, base_dir::AbstractString; verbose::Bool=false)\n\nGenerate XML content in Repomix format.\n\nArguments\n\ntext_files: Vector of text file paths to include\nbase_dir: Base directory of the repository\nverbose: Whether to enable detailed logging (default: false)\n\nReturns\n\nString containing the XML content with header\n\nExamples\n\nfiles = RepoPacker.collect_text_files(\".\")\nxml_content = RepoPacker.generate_xml_content(files, \".\")\n\n\n\n\n\n","category":"method"},{"location":"api/#RepoPacker.get_directory_structure-Tuple{AbstractString}","page":"API Reference","title":"RepoPacker.get_directory_structure","text":"get_directory_structure(dir_path::AbstractString; verbose::Bool=false)\n\nGenerate a visual representation of the directory structure, excluding neglected paths.\n\nArguments\n\ndir_path: Directory path to analyze\nverbose: Whether to enable detailed logging (default: false)\n\nReturns\n\nString representation of the directory structure\n\nExamples\n\nstructure = RepoPacker.get_directory_structure(\".\")\nprintln(structure)\n\n\n\n\n\n","category":"method"},{"location":"api/#RepoPacker.get_top_files","page":"API Reference","title":"RepoPacker.get_top_files","text":"get_top_files(file_token_counts::Dict{String, Int}, n::Int=5)\n\nGet the top N files with the highest token counts.\n\nReturns\n\nVector of tuples (filepath, tokencount) sorted by token count descending\n\n\n\n\n\n","category":"function"},{"location":"api/#RepoPacker.is_text_file-Tuple{AbstractString}","page":"API Reference","title":"RepoPacker.is_text_file","text":"is_text_file(path::AbstractString)\n\nCheck if a file is a text file based on its extension.\n\nArguments\n\npath: File path to check\n\nReturns\n\ntrue if the file has a recognized text extension, false otherwise\n\nExamples\n\nRepoPacker.is_text_file(\"src/RepoPacker.jl\")  # returns true\nRepoPacker.is_text_file(\"docs/logo.png\")      # returns false\n\n\n\n\n\n","category":"method"},{"location":"api/#RepoPacker.neglect_path-Tuple{AbstractString}","page":"API Reference","title":"RepoPacker.neglect_path","text":"neglect_path(path::AbstractString)\n\nAdd a path (file or directory) to be excluded from packing. Paths are matched as substrings in the full file path (relative to repo root).\n\nArguments\n\npath: Path pattern to exclude (can be relative or absolute)\n\nExamples\n\nRepoPacker.neglect_path(\"test/\")\nRepoPacker.neglect_path(\".env\")\n\n\n\n\n\n","category":"method"},{"location":"api/#RepoPacker.pack_directory","page":"API Reference","title":"RepoPacker.pack_directory","text":"pack_directory(dir_path::AbstractString, output_file::AbstractString=\"repo.xml\"; \n               output_style::Symbol=:xml, verbose::Bool=false)\n\nPack the text files in a directory into a file in the specified format.\n\nArguments\n\ndir_path: Directory path to pack\noutput_file: Output file path (default: \"repo.xml\")\noutput_style: Format to use (:xml, :json, or :markdown)\nverbose: Whether to enable detailed logging (default: false)\n\nReturns\n\nPath to the generated output file\n\nExamples\n\nRepoPacker.pack_directory(\".\", \"repo.xml\")\n\nErrors\n\nThrows ArgumentError if directory doesn't exist\n\n\n\n\n\n","category":"function"},{"location":"api/#RepoPacker.should_neglect-Tuple{AbstractString, AbstractString}","page":"API Reference","title":"RepoPacker.should_neglect","text":"should_neglect(full_path::AbstractString, base_dir::AbstractString)\n\nCheck if a file should be excluded based on the global NEGLECTPATHS list. Compares against both absolute and relative (to basedir) paths.\n\nArguments\n\nfull_path: Absolute path of the file\nbase_dir: Base directory of the repository\n\nReturns\n\ntrue if the file should be excluded, false otherwise\n\n\n\n\n\n","category":"method"},{"location":"usage/advanced/#Advanced-Configuration","page":"Advanced Configuration","title":"Advanced Configuration","text":"","category":"section"},{"location":"usage/advanced/","page":"Advanced Configuration","title":"Advanced Configuration","text":"RepoPacker.jl offers several configuration options to customize how repositories are packed.","category":"page"},{"location":"usage/advanced/#Customizing-Text-File-Extensions","page":"Advanced Configuration","title":"Customizing Text File Extensions","text":"","category":"section"},{"location":"usage/advanced/","page":"Advanced Configuration","title":"Advanced Configuration","text":"By default, RepoPacker recognizes common text file extensions. You can add custom extensions using add_extension():","category":"page"},{"location":"usage/advanced/","page":"Advanced Configuration","title":"Advanced Configuration","text":"using RepoPacker\n\n# Add R and SQL extensions\nRepoPacker.add_extension(\".r\")\nRepoPacker.add_extension(\".sql\")\n\n# Now .r and .sql files will be included\nRepoPacker.pack_directory(\".\", \"repo.xml\")","category":"page"},{"location":"usage/advanced/#Default-Extensions","page":"Advanced Configuration","title":"Default Extensions","text":"","category":"section"},{"location":"usage/advanced/","page":"Advanced Configuration","title":"Advanced Configuration","text":"The default set of text file extensions includes:","category":"page"},{"location":"usage/advanced/","page":"Advanced Configuration","title":"Advanced Configuration","text":"using RepoPacker\n@show RepoPacker.TEXT_FILE_EXTENSIONS","category":"page"},{"location":"usage/advanced/#Excluding-Paths","page":"Advanced Configuration","title":"Excluding Paths","text":"","category":"section"},{"location":"usage/advanced/","page":"Advanced Configuration","title":"Advanced Configuration","text":"You can exclude specific files or directories from the packing process using neglect_path():","category":"page"},{"location":"usage/advanced/","page":"Advanced Configuration","title":"Advanced Configuration","text":"using RepoPacker\n\n# Exclude test directories and environment files\nRepoPacker.neglect_path(\"test/\")\nRepoPacker.neglect_path(\".env\")\n\n# Pack directory with exclusions\nRepoPacker.pack_directory(\".\", \"repo.xml\")","category":"page"},{"location":"usage/advanced/#Path-Matching-Rules","page":"Advanced Configuration","title":"Path Matching Rules","text":"","category":"section"},{"location":"usage/advanced/","page":"Advanced Configuration","title":"Advanced Configuration","text":"Paths are matched as substrings in the full file path\nBoth absolute and relative paths are checked\nPatterns can match anywhere in the path","category":"page"},{"location":"usage/advanced/","page":"Advanced Configuration","title":"Advanced Configuration","text":"Examples:","category":"page"},{"location":"usage/advanced/","page":"Advanced Configuration","title":"Advanced Configuration","text":"# Exclude all .log files anywhere in the repository\nRepoPacker.neglect_path(\".log\")\n\n# Exclude the docs directory\nRepoPacker.neglect_path(\"docs/\")\n\n# Exclude files in a specific subdirectory\nRepoPacker.neglect_path(\"src/legacy/\")","category":"page"},{"location":"usage/advanced/#Empty-Directory-Handling","page":"Advanced Configuration","title":"Empty Directory Handling","text":"","category":"section"},{"location":"usage/advanced/","page":"Advanced Configuration","title":"Advanced Configuration","text":"When no text files are found, RepoPacker creates a minimal valid output:","category":"page"},{"location":"usage/advanced/","page":"Advanced Configuration","title":"Advanced Configuration","text":"using RepoPacker\n\n# Create an empty directory\nempty_dir = mktempdir()\n\n# Pack the empty directory\nRepoPacker.pack_directory(empty_dir, \"empty.xml\")\n\n# The resulting file will contain a message indicating no text files were found","category":"page"},{"location":"usage/advanced/","page":"Advanced Configuration","title":"Advanced Configuration","text":"This ensures that the output file is always valid, even when no content is available.","category":"page"},{"location":"usage/examples/#Usage-Examples","page":"Examples","title":"Usage Examples","text":"","category":"section"},{"location":"usage/examples/","page":"Examples","title":"Examples","text":"This section provides real-world examples of how to use RepoPacker.jl in various scenarios.","category":"page"},{"location":"usage/examples/#Basic-Repository-Analysis","page":"Examples","title":"Basic Repository Analysis","text":"","category":"section"},{"location":"usage/examples/","page":"Examples","title":"Examples","text":"using RepoPacker\n\n# Pack your project for analysis\nRepoPacker.pack_directory(\"my_project\", \"my_project.xml\", verbose=true)\n\n# The resulting XML file can be processed by AI tools\nprintln(\"Repository packed successfully. Output file: my_project.xml\")","category":"page"},{"location":"usage/examples/#Analyzing-a-GitHub-Repository","page":"Examples","title":"Analyzing a GitHub Repository","text":"","category":"section"},{"location":"usage/examples/","page":"Examples","title":"Examples","text":"using RepoPacker\n\n# Clone and analyze a popular Julia package\nRepoPacker.clone_and_pack(\n    \"https://github.com/FluxML/Flux.jl.git\",\n    \"flux.xml\",\n    verbose=true\n)\n\nprintln(\"Flux.jl repository packed successfully\")","category":"page"},{"location":"usage/examples/#Custom-Configuration-for-a-Python-Project","page":"Examples","title":"Custom Configuration for a Python Project","text":"","category":"section"},{"location":"usage/examples/","page":"Examples","title":"Examples","text":"using RepoPacker\n\n\n\n# Configure for a Python project\nRepoPacker.neglect_path(\"venv/\")\nRepoPacker.neglect_path(\"__pycache__/\")\nRepoPacker.neglect_path(\".pytest_cache/\")\n\n# Add any custom extensions needed\nRepoPacker.add_extension(\".ipynb\")  # Include Jupyter notebooks\n\n# Pack the Python project\nRepoPacker.pack_directory(\"my_python_project\", \"python_project.xml\")\n\nprintln(\"Python project packed successfully\")","category":"page"},{"location":"usage/examples/#Analyzing-Multiple-Repositories","page":"Examples","title":"Analyzing Multiple Repositories","text":"","category":"section"},{"location":"usage/examples/","page":"Examples","title":"Examples","text":"using RepoPacker\n\nrepositories = [\n    (\"JuliaLang/julia\", \"julia.xml\"),\n    (\"FluxML/Flux.jl\", \"flux.xml\"),\n    (\"korsbo/LatentDiffEq.jl\", \"latendiffeq.xml\")\n]\n\nfor (repo, output) in repositories\n    println(\"Processing $repo...\")\n    try\n        RepoPacker.clone_and_pack(\n            \"https://github.com/$repo.git\",\n            output,\n            verbose=true\n        )\n        println(\"โ Successfully processed $repo\")\n    catch e\n        println(\"โ Failed to process $repo: $e\")\n    end\nend","category":"page"},{"location":"usage/examples/#Using-JSON-Output-with-jq","page":"Examples","title":"Using JSON Output with jq","text":"","category":"section"},{"location":"usage/examples/","page":"Examples","title":"Examples","text":"When using JSON output, you can process it with command-line tools like jq:","category":"page"},{"location":"usage/examples/","page":"Examples","title":"Examples","text":"# Generate JSON output\nRepoPacker.pack_directory(\".\", \"repo.json\", output_style=:json)","category":"page"},{"location":"usage/examples/","page":"Examples","title":"Examples","text":"# List all files\ncat repo.json | jq -r '.files | keys[]'\n\n# Get total token count\ncat repo.json | jq '.metrics.totalTokens'\n\n# Extract specific file\ncat repo.json | jq -r '.files[\"src/RepoPacker.jl\"]'\n\n# Show top 3 files by token count\ncat repo.json | jq -r '.metrics.fileTokenCounts | to_entries | sort_by(-.value) | .[0:3] | .[] | \"\\(.key): \\(.value) tokens\"'","category":"page"},{"location":"usage/examples/#Using-Markdown-Output-for-Documentation","page":"Examples","title":"Using Markdown Output for Documentation","text":"","category":"section"},{"location":"usage/examples/","page":"Examples","title":"Examples","text":"Markdown output is particularly useful for documentation:","category":"page"},{"location":"usage/examples/","page":"Examples","title":"Examples","text":"# Generate Markdown output\nRepoPacker.pack_directory(\".\", \"documentation.md\", output_style=:markdown)","category":"page"},{"location":"usage/examples/","page":"Examples","title":"Examples","text":"This creates a human-readable document that can be viewed in any Markdown viewer or converted to HTML/PDF.","category":"page"},{"location":"usage/examples/#Token-Aware-Repository-Packing","page":"Examples","title":"Token-Aware Repository Packing","text":"","category":"section"},{"location":"usage/examples/","page":"Examples","title":"Examples","text":"When working with LLMs that have context window limits, you can use token metrics to guide your analysis:","category":"page"},{"location":"usage/examples/","page":"Examples","title":"Examples","text":"using RepoPacker\n\n# Pack the repository\nRepoPacker.pack_directory(\".\", \"repo.json\", output_style=:json)\n\n# Parse the JSON to get metrics\nusing JSON\nmetrics = JSON.parsefile(\"repo.json\")[\"metrics\"]\n\nprintln(\"Total tokens: $(metrics[\"totalTokens\"])\")\nprintln(\"Top files by token count:\")\n\n# Display top 5 files\nfor (path, tokens) in sort(collect(metrics[\"fileTokenCounts\"]), by=x->x[2], rev=true)[1:min(5, length(metrics[\"fileTokenCounts\"]))]\n    println(\"- $path: $tokens tokens\")\nend\n\n# Check if within common context window limits\nif metrics[\"totalTokens\"] > 128000\n    println(\"Warning: Total tokens exceed 128K context window\")\nelseif metrics[\"totalTokens\"] > 32000\n    println(\"Note: Total tokens exceed 32K context window\")\nend","category":"page"},{"location":"installation/#Installation","page":"Installation","title":"Installation","text":"","category":"section"},{"location":"installation/","page":"Installation","title":"Installation","text":"RepoPacker.jl is available through the Julia package registry and can be installed with the Julia package manager.","category":"page"},{"location":"installation/#Installing-the-Stable-Release","page":"Installation","title":"Installing the Stable Release","text":"","category":"section"},{"location":"installation/","page":"Installation","title":"Installation","text":"To install the latest stable release of RepoPacker.jl, run the following command in the Julia REPL:","category":"page"},{"location":"installation/","page":"Installation","title":"Installation","text":"using Pkg\nPkg.add(\"RepoPacker\")","category":"page"},{"location":"installation/#Installing-the-Development-Version","page":"Installation","title":"Installing the Development Version","text":"","category":"section"},{"location":"installation/","page":"Installation","title":"Installation","text":"If you want the latest development version, you can install directly from GitHub:","category":"page"},{"location":"installation/","page":"Installation","title":"Installation","text":"using Pkg\nPkg.add(url=\"https://github.com/imohag9/RepoPacker.jl.git\")","category":"page"},{"location":"installation/#Verifying-Installation","page":"Installation","title":"Verifying Installation","text":"","category":"section"},{"location":"installation/","page":"Installation","title":"Installation","text":"After installation, you can verify that RepoPacker is working correctly by running the test suite:","category":"page"},{"location":"installation/","page":"Installation","title":"Installation","text":"using Pkg\nPkg.test(\"RepoPacker\")","category":"page"},{"location":"installation/#Dependencies","page":"Installation","title":"Dependencies","text":"","category":"section"},{"location":"installation/","page":"Installation","title":"Installation","text":"RepoPacker.jl depends on the following packages:","category":"page"},{"location":"installation/","page":"Installation","title":"Installation","text":"LibGit2.jl: For Git repository operations\nXML.jl: For XML document generation\nJSON.jl: For JSON document generation","category":"page"},{"location":"installation/","page":"Installation","title":"Installation","text":"These dependencies will be automatically installed when you install RepoPacker.jl.","category":"page"},{"location":"#RepoPacker.jl","page":"Home","title":"RepoPacker.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"RepoPacker.jl is a Julia package that packs a local directory or Git repository into a single file in a format compatible with Repomix, a tool designed to feed entire codebases into AI systems for analysis. This format is optimized for consumption by large language models and other AI systems that require complete repository context.","category":"page"},{"location":"#Relationship-to-Repomix","page":"Home","title":"Relationship to Repomix","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"RepoPacker.jl is specifically designed to generate output in the format inspired by that used by Repomix, an open-source tool created by yamadashy. While Repomix itself is implemented in other languages, RepoPacker.jl provides a native Julia implementation that:","category":"page"},{"location":"","page":"Home","title":"Home","text":"Generates files with close structure to Repomix output\nFollows the same file inclusion/exclusion patterns\nMaintains the same directory structure representation\nIncludes the same metadata sections required by AI analysis tools\nProvides token count metrics to help with LLM context window limitations","category":"page"},{"location":"","page":"Home","title":"Home","text":"This compatibility ensures that files generated by RepoPacker.jl can be used interchangeably with those produced by the original Repomix tool.","category":"page"},{"location":"#Features","page":"Home","title":"Features","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Pack local directories into Repomix-compatible format\nClone and pack Git repositories directly\nSupport for multiple output formats:\nXML (default)\nJSON\nMarkdown\nPath exclusion patterns\nDetailed metrics:\nTotal files\nTotal characters\nEstimated token count (using char/4 heuristic)\nDetailed logging with verbosity control\nRobust error handling\nComprehensive test suite","category":"page"},{"location":"#Why-Use-RepoPacker?","page":"Home","title":"Why Use RepoPacker?","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"RepoPacker solves the problem of providing complete repository context to AI systems. When working with large language models for code analysis, it's often necessary to provide the entire codebase context in a single, structured format. RepoPacker generates this format automatically, handling:","category":"page"},{"location":"","page":"Home","title":"Home","text":"File filtering (only text files)\nDirectory structure representation\nContent encoding in a safe format\nExclusion of sensitive or irrelevant files\nMetrics to help with LLM context window limitations","category":"page"},{"location":"","page":"Home","title":"Home","text":"Unlike general-purpose archive tools, RepoPacker specifically targets the needs of AI-assisted development workflows by producing output that's optimized for LLM consumption.","category":"page"},{"location":"#Quick-Start","page":"Home","title":"Quick Start","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"using RepoPacker\n\n# Pack current directory as XML (default)\nRepoPacker.pack_directory(\".\", \"repo.xml\")\n\n# Pack as JSON\nRepoPacker.pack_directory(\".\", \"repo.json\", output_style=:json)\n\n# Pack as Markdown\nRepoPacker.pack_directory(\".\", \"repo.md\", output_style=:markdown)\n\n# Clone and pack a GitHub repository\nRepoPacker.clone_and_pack(\"https://github.com/JuliaLang/julia.git\", \"julia.xml\")","category":"page"},{"location":"usage/basic/#Basic-Usage","page":"Basic Usage","title":"Basic Usage","text":"","category":"section"},{"location":"usage/basic/","page":"Basic Usage","title":"Basic Usage","text":"RepoPacker.jl provides two main operations: packing local directories and cloning/packing Git repositories.","category":"page"},{"location":"usage/basic/#Packing-a-Local-Directory","page":"Basic Usage","title":"Packing a Local Directory","text":"","category":"section"},{"location":"usage/basic/","page":"Basic Usage","title":"Basic Usage","text":"The simplest way to use RepoPacker is to pack the current directory:","category":"page"},{"location":"usage/basic/","page":"Basic Usage","title":"Basic Usage","text":"using RepoPacker\n\n# Pack current directory as XML (default)\nRepoPacker.pack_directory(\".\", \"repo.xml\")\n\n# Pack as JSON\nRepoPacker.pack_directory(\".\", \"repo.json\", output_style=:json)\n\n# Pack as Markdown\nRepoPacker.pack_directory(\".\", \"repo.md\", output_style=:markdown)","category":"page"},{"location":"usage/basic/","page":"Basic Usage","title":"Basic Usage","text":"This will create a file containing all text files from the current directory in the specified format.","category":"page"},{"location":"usage/basic/#Parameters","page":"Basic Usage","title":"Parameters","text":"","category":"section"},{"location":"usage/basic/","page":"Basic Usage","title":"Basic Usage","text":"dir_path: The directory to pack (required)\noutput_file: The output file path (default: \"repo.xml\")\noutput_style: Format to use (:xml, :json, or :markdown)\nverbose: Whether to enable detailed logging (default: false)","category":"page"},{"location":"usage/basic/","page":"Basic Usage","title":"Basic Usage","text":"# Pack a specific directory with verbose logging\nRepoPacker.pack_directory(\"/path/to/project\", \"project.xml\", verbose=true)\n\n# Pack in JSON format\nRepoPacker.pack_directory(\"/path/to/project\", \"project.json\", output_style=:json)","category":"page"},{"location":"usage/basic/#Cloning-and-Packing-a-Git-Repository","page":"Basic Usage","title":"Cloning and Packing a Git Repository","text":"","category":"section"},{"location":"usage/basic/","page":"Basic Usage","title":"Basic Usage","text":"You can directly clone and pack a Git repository in one step:","category":"page"},{"location":"usage/basic/","page":"Basic Usage","title":"Basic Usage","text":"using RepoPacker\n\n# Clone and pack a GitHub repository as XML\nRepoPacker.clone_and_pack(\"https://github.com/JuliaLang/julia.git\", \"julia.xml\")\n\n# Clone and pack as JSON\nRepoPacker.clone_and_pack(\"https://github.com/JuliaLang/julia.git\", \"julia.json\", output_style=:json)\n\n# With verbose logging\nRepoPacker.clone_and_pack(\"https://github.com/JuliaLang/julia.git\", \"julia.xml\", verbose=true)","category":"page"},{"location":"usage/basic/","page":"Basic Usage","title":"Basic Usage","text":"This will:","category":"page"},{"location":"usage/basic/","page":"Basic Usage","title":"Basic Usage","text":"Clone the repository to a temporary directory\nPack the repository contents into the specified file\nClean up the temporary directory","category":"page"},{"location":"usage/basic/#Parameters-2","page":"Basic Usage","title":"Parameters","text":"","category":"section"},{"location":"usage/basic/","page":"Basic Usage","title":"Basic Usage","text":"repo_url: The URL of the Git repository (required)\noutput_file: The output file path (default: \"repo.xml\")\noutput_style: Format to use (:xml, :json, or :markdown)\ntemp_dir: Temporary directory for cloning (default: auto-generated)\nverbose: Whether to enable detailed logging (default: false)","category":"page"},{"location":"usage/basic/#Understanding-the-Output","page":"Basic Usage","title":"Understanding the Output","text":"","category":"section"},{"location":"usage/basic/","page":"Basic Usage","title":"Basic Usage","text":"The generated file contains:","category":"page"},{"location":"usage/basic/","page":"Basic Usage","title":"Basic Usage","text":"A summary section with purpose, format, and usage guidelines\nA visual representation of the directory structure\nMetrics about the repository:\nTotal files\nTotal characters\nEstimated token count\nTop files by token count\nThe contents of all text files in the repository","category":"page"},{"location":"usage/basic/","page":"Basic Usage","title":"Basic Usage","text":"This format is designed to be easily parsed by AI systems while maintaining the context of the original repository structure.","category":"page"}]
}
